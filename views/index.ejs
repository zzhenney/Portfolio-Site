<!DOCTYPE html>
<!--
To change this license header, choose License Headers in Project Properties.
To change this template file, choose Tools | Templates
and open the template in the editor.
-->
<html>
    <head>
    	<!-- Global site tag (gtag.js) - Google Analytics -->
		<script async src="https://www.googletagmanager.com/gtag/js?id=UA-123080567-1"></script>
		<script>
		  window.dataLayer = window.dataLayer || [];
		  function gtag(){dataLayer.push(arguments);}
		  gtag('js', new Date());

		  gtag('config', 'UA-123080567-1');
		</script>

        <title>Zac Henney</title>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        
        <link rel="stylesheet" type="text/css" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
        <link rel="stylesheet" href="stylesheets/style.css">
        
        <link href="https://fonts.googleapis.com/css?family=Lobster" rel="stylesheet">
        <link href="https://fonts.googleapis.com/css?family=PT+Sans" rel="stylesheet">
        
         
    </head>
    <body data-spy="scroll" data-target=".navbar" data-offset="50" >
        
        <div id="header" data-scroll-index="0">
            
            
            <div class="intro">
                <h1>Hi. </h1>
                <h1>I'm <span class="name">Zac Henney</span>,</h1>
                <h1>a recent computer science graduate</h1>
                <h1>and aspiring software engineer.</h1>
            </div>
                
        </div>  

        <nav class="navbar navbar-expand-sm sticky-top"> 
            <ul class="navbar-nav navbar-center">
                <li class="nav-item navlinks">
                    <a class="nav-link" href="#portfolio">Portfolio</a>
                </li>
                <h4>/</h4>
                <li class="nav-item navlinks">
                    <a class="nav-link" href="#resume">Resume</a>
                </li>
                <h4>/</h4>
                <li class="nav-item navlinks">
                    <a class="nav-link" href="#contact">Contact</a>
                </li>  
            </ul>
        </nav>
        


        <div id="content">
            <section data-scroll-index="1">
                <div id="portfolio" class="container">
                    <br>
                    <h1 class='sectitle'>Portfolio</h1>
                    <div class='center-content'>
                        <div class="col-12">
                            <div class="card-deck">
                                <!-- Webserver -->
                                <div class="row">
                                
                                    <div class="card">
                                        <div class="card-body">
                                            <h5 class="card-title">Web Server</h5>
                                            <p class="card-text">Implemented in Java, this multithreaded web server handles a subset of HTTP requests. Specifically, I implemented the parsing of server config files, the generation and sending of HTTP responses, and user/request authentication.  </p>
                                            <a href="https://github.com/zzhenney/WebServer" target="_blank" class="btn btn-primary">Codebase</a>
                                            <button type="button" class="btn btn-info" data-toggle="modal" data-target="#webserverModal">Documentation</button>
                                        </div>
                                        <div class="card-footer">
                                            <small class="text-muted">Built with: Java, Postman, and Netbeans IDE</small>
                                        </div>
                                    </div>
                                    
                                    <div class="modal fade" id="webserverModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                                            <div class="modal-dialog modal-lg" role="document">
                                              <div class="modal-content">
                                                <div class="modal-header">
                                                  <h5 class="modal-title" id="exampleModalLabel">Web Server</h5>
                                                  <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                    <span aria-hidden="true">&times;</span>
                                                  </button>
                                                </div>
                                                <div class="modal-body">
                                                    <h5>Inspiration</h5>
                                                    <p>
                                                        The purpose of this project was to learn about the HyperText Transfer Protocol (HTTP) and the inner workings of web servers.
                                                        It also provided an opportunity to practice my software development skills.
                                                    </p>
                                                    <h5>What it Does</h5>
                                                    <p>
                                                        This web server can handle a subset of HTTP requests and responses (fig. 1). 
                                                        The server can also handle multiple simultaneous requests via multithreading. 
                                                        Below, is a high level overview of the web server’s features. 
                                                        <ul>
                                                            <li>Read, and store, standard conﬁguration ﬁles for use in responding to client requests</li>
                                                            <li>Parse HTTP Requests</li>
                                                            <li>Generate and send HTTP Responses</li>
                                                            <li>Respond to multiple simultaneous requests through the use of threads</li>
                                                            <li>Execute server side processes to handle server side scripts</li>
                                                            <li>Support simple authentication</li>
                                                            <li>Support simple caching</li>
                                                            <li>Logging</li>
                                                        </ul>  
                                                    </p>
                                                    <figure>
                                                        <img src="images/req_res_table.png">
                                                        <figcaption>fig. 1</figcaption>
                                                        
                                                    </figure>
                                                    <h5>Implementation</h5>
                                                    <p>
                                                        The web server was implemented in Java 8.0. Tools used during development include Netbeans IDE 8.2 and Postman 6.7.4.
                                                    </p>
                                                    <p>
                                                        The entry point to the web server is the main method in WebServer.java. The server listens to port 8080 by default. 
                                                        WebServer is responsible for setting its configuration via the httpd.conf and MIME.types files located in conf folder located in the server’s root directory. 
                                                        The HttpdConf and MimeTypes classes are used by the server to load the configurations and both utilize HashMaps to store their respectful headers. 
                                                        Each is also responsible for the parsing of their respected files. 
                                                        Both HttpdConf and MimeTypes extend ConfigurationReader, a class used to read a file and provide scanning logic, to help in the parsing. 
                                                    </p>
                                                    <p>
                                                        The server utilizes the ExecutorService interface to manage a fixed thread pool of 10 threads, allowing the server to handle multiple simultaneous requests. 
                                                        The Worker class implements Runnable and is passed to the fixed thread pool for execution. 
                                                        The Worker expects to be passed a Socket, HttpdConf, and MimeType objects. 
                                                        The Socket is used with Worker to facilitate communication between the client and server. 
                                                    </p>
                                                    <p>
                                                        When WebServer receives a request, the Request class is responsible for handling the parsing and extracting the properly formatted HTTP request’s information. 
                                                        Worker also utilizes a ResponseFactory to dynamically create a response to a request. 
                                                        All Responses extend from an abstract Response class. 
                                                        The Response class provides both abstract and implemented methods. 
                                                        The ResponseFactory verifies if a resource is protected and if the resource exists and then based on the appropriate response code, generates 
                                                        the appropriate Response to be sent to the client. 
                                                        Once a request is sent the Logger class handles the logging of the response.
                                                    </p>
                                                    
                                                    <h5>Challenges & Issues</h5>
                                                    <p>
                                                        During development there was an issue when parsing file paths for htaccess detection. 
                                                        I found that the leading “/” was being removed from the path. 
                                                        As a result the htaccess file was never detected. 
                                                        This was caused by using Java’s Path substring method. 
                                                        I fixed this by using Java’s Path getParent method instead.
                                                    </p>
                                                    <h5>What I learned</h5>
                                                    <p>Through this project I gained the understanding of webservers as well as HTTP</p>
                                                    <p>Initially, this seemed like a daunting project. After breaking down the problem into smaller pieces it became much more manageable.</p>
                                                    <p>Postman is a crucial tool for quickly testing APIs. Without Postman the development time for this project would have been longer. I will definitely use Postman in the future when working with APIs.</p>
                                                    <p>In my courses prior to this project we had breifly discussed design patterns. This was my first time using the Factory pattern. Being able to apply the pattern to an actual project made the concept seem less abstract. </p>
                                                </div>
                                                <div class="modal-footer">
                                                  <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                
                                <br>
                                <!-- Movie Rank -->
                                <div class="row">
                                    <div class="card">
                                    <div class="card-body">
                                        <h5 class="card-title">Movie Rank</h5>
                                        <p class="card-text">A mobile friendly movie review site built with an emphasis on user experience and database design. Some UX based features include returning to previous page after login, user based routing restrictions, and user profile settings.</p>
                                        <a href="https://github.com/zzhenney/MovieRank" target="_blank" class="btn btn-primary">Codebase</a>
                                        <button type="button" class="btn btn-info" data-toggle="modal" data-target="#movierank-doc-Modal">Documentation</button>
                                        <a href="https://movierank.herokuapp.com/" target="_blank" class="btn btn-success">Live Project</a>
                                        <!-- <button type="button" class="btn btn-warning" data-toggle="modal" data-target="#movierank-demo-Modal">Demo</button> -->
                                        <a href="https://player.vimeo.com/video/357020238" target="_blank" class="btn btn-warning">Demo</a>
                                    </div>
                                    <div class="card-footer">
                                        <small class="text-muted">Built with: JavaScript, Node.js, Express.js, Postgres, Bootstrap, and Heroku</small>
                                    </div>
                                    </div>
                                    <div class="modal fade" id="movierank-demo-Modal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                                        <div class="modal-dialog modal-lg" role="document">
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <h5 class="modal-title" id="exampleModalLabel">Movie Rank</h5>
                                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                        <span aria-hidden="true">&times;</span>
                                                    </button>
                                                </div>
                                                <div class="modal-body">
                                                    <h5>Demo</h5>
                                                    <iframe id="movierank-demo-iframe" src="https://player.vimeo.com/video/357020238" width="640" height="360" frameborder="0" allow="autoplay; fullscreen" allowfullscreen></iframe>
                                                </div>
                                                <div class="modal-footer">
                                                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="modal fade" id="movierank-doc-Modal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                                            <div class="modal-dialog modal-lg" role="document">
                                              <div class="modal-content">
                                                <div class="modal-header">
                                                  <h5 class="modal-title" id="exampleModalLabel">Movie Rank</h5>
                                                  <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                    <span aria-hidden="true">&times;</span>
                                                  </button>
                                                </div>
                                                <div class="modal-body">
                                                    <h5>Inspiration</h5>
                                                    <p>
                                                        Movie Rank was built as a final project for my database class. The project served as a way to showcase my new knowledge of databases.
                                                    </p>
                                                    <h5>What it Does</h5>
                                                    <p>
                                                        Movie Rank allows users to search for movie information and rate movies. Below is a high level overview of Movie Rank’s features. 
                                                        <ul>
                                                            <li>User account creation</li>
                                                            <li>User authentication</li>
                                                            <li>Authenticated users can rate movies</li>
                                                            <li>Authenticated users can edit previous ratings</li>
                                                            <li>Users can search for movies</li>
                                                            <li>Persistent login</li>
                                                            <li>Return to previous screen after login</li>
                                                        </ul>  
                                                    </p>
                                                    
                                                    <h5>Implementation</h5>
                                                    <p>
                                                        The project was implemented using JavaScript, Node.js, Express.js, Bootstrap, and PostgreSQL. The main focus of this project was on creating the database. The secondary focus was user experience. Below is the entity relationship diagram and the database model.
                                                    </p>
                                                    <figure>
                                                        <a href="images/ERD_Final.png" target="_blank">
                                                            <img src="images/ERD_Final.png">
                                                            <figcaption>Entity Relation Diagram (ERD)</figcaption>
                                                        </a>
                                                        
                                                    </figure>
                                                    <figure>
                                                        <a href="images/DBModelDiagram.png" target="_blank">
                                                            <img src="images/DBModelDiagram.png">
                                                            <figcaption>Database Model</figcaption>
                                                        </a>     
                                                    </figure>
                                                    
                                                    <h5>Challenges & Issues</h5>
                                                    <p>
                                                        Initially the database was developed using MySQL. 
                                                        However, for deployment the database needed to be PostgreSQL. 
                                                        To fix this issue I used a tool, pgloader, to load the MySQL data into PostgreSQL.
                                                    </p>
                                                    <h5>What I learned</h5>
                                                    <p>
                                                        I am happy with the way the project turned out in terms of code quality. 
                                                        The code is precise and self-documenting. 
                                                        I spent a fair amount of time making design decisions and focusing on clean code. 
                                                    </p>
                                                </div>
                                                <div class="modal-footer">
                                                  <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                <br>
                                <!-- caltrain -->
                                <div class="row">
                        
                                    <div class="card">
                                        <div class="card-body">
                                            <h5 class="card-title">Magic Mirror Caltrain Module</h5>
                                            <p class="card-text">A Caltrain Module for the Magic Mirror open source project. The module provides northbound and/or southbound departure times or estimated times of departure for the selected Caltrain station.</p>
                                            <a href="https://github.com/zzhenney/MMM-Caltrain" target="_blank" class="btn btn-primary">Codebase</a>
                                            <button type="button" class="btn btn-info" data-toggle="modal" data-target="#mmmcaltrain-doc-Modal">Documentation</button>
                                            
                                        </div>
                                        <div class="card-footer">
                                            <small class="text-muted">Built with: JavaScript, MagicMirror open source project</small>
                                        </div>
                                    </div>
                                    <div class="modal fade" id="mmmcaltrain-doc-Modal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                                            <div class="modal-dialog modal-lg" role="document">
                                              <div class="modal-content">
                                                <div class="modal-header">
                                                  <h5 class="modal-title" id="exampleModalLabel">Magic Mirror Caltrain Module</h5>
                                                  <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                    <span aria-hidden="true">&times;</span>
                                                  </button>
                                                </div>
                                                <div class="modal-body">
                                                    <h5>Inspiration</h5>
                                                    <p>
                                                            After creating my own (basic) smart mirror web app (see portfolio) I stumbled upon the Magic Mirror open source project. 
                                                            I noticed that a Caltrain times module had not been created yet. 
                                                            I saw this as a perfect opportunity to get involved in the open source community.
                                                    </p>
                                                    <h5>What it Does</h5>
                                                    <p>
                                                            The Caltrain module provides departure times or estimated times of departure (etd) for the selected Caltrain station. 
                                                            Northbound and Southbound times can be displayed or hidden. Caltrain data is obtained via API calls to 511.org.
                                                            Below is a high level overview of the features. 
                                                        <ul>
                                                            <li>User can set station</li>
                                                            <li>User can select northbound and/or southbound times</li>
                                                            <li>Users can display departure time or estimated time til departure (countdown)</li>
                                                            <li>User can display times in 24 or 12 hour</li>
                                                        </ul>  
    
                                                    </p>
                                                    <figure>
                                                        <img src="images/etd.png">
                                                        <figcaption>Estimated Time til Departure</figcaption>     
                                                    </figure>
                                                    <figure>
                                                        <img src="images/departure_times.png">
                                                        <figcaption>Departure Times</figcaption>
                                                    </figure>
                                                    <h5>Implementation</h5>
                                                    <p>
                                                        Implementing the project was fairly straight forward after reading the Magic Mirror module documentation. 
                                                        There are two main files that compose the project. 
                                                        The first being MMM-Caltrain.js, which provides the presentation layer. 
                                                        The second being node-helper.js, which handles the external api calls to 511.org.                                                </p>
                                                    
                                                    <h5>Challenges & Issues</h5>
                                                    <p>
                                                        One challenge I had was dealing with UTC time conversions. 
                                                        Initially I thought I could handle the conversions myself. 
                                                        However, I ended up using a third party library to cut down the development time. 
                                                        Something about not reinventing the wheel.
                                                    </p>
                                                    <h5>What I learned</h5>
                                                    <p>
                                                        One of my biggest takeaways from this project was learning how to create and work with git submodules. 
                                                        This was a great learning experience in working on larger projects.
                                                    </p>
                                                </div>
                                                <div class="modal-footer">
                                                  <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                        
                            
                                </div>
                                
                                <br>
                                <!-- Smart Mirror Dash -->
                                <div class="row">
                            
                                        <div class="card">
                                        <div class="card-body">
                                            <h5 class="card-title">Smart Mirror Dashboard Generator</h5>
                                            <p class="card-text">This tool allows users to login and create a background for their smart mirror. 
                                            Display options include specific muni and bart ETAs, time, date, and weather. This tool is intended to help those without much programming experience quickly build a basic smart mirror. </p>
                                            <a href="https://github.com/zzhenney/Smart-Mirror" target="_blank" class="btn btn-primary">Codebase</a>
                                            <a href="https://smart-mirror-gen.herokuapp.com/" target="_blank" class="btn btn-success">Live Project</a>
                                        </div>
                                        <div class="card-footer">
                                            <small class="text-muted">Built with: JavaScript, Node.js, Heroku, Postgres, Python, Express.js, Bootstrap</small>
                                        </div>
                                        </div>
                            
                                </div>
                                <br>
                                <!-- Infinite image -->
                                <div class="row">
                                    <div class="card">
                                    <div class="card-body">
                                        <h5 class="card-title">Infinite Image</h5>
                                        <p class="card-text">With a focus on user centered design and scrum/agile principles, I led a team of 7 student engineers in the rapid prototype development of a stock photosite over the course of 9 weeks. During this time we also had to learn Ruby and Ruby on Rails.</p>
                                        <a href="https://github.com/zzhenney/Infinite-Image" target="_blank" class="btn btn-primary">Codebase</a>
                                
                                    </div>
                                    <div class="card-footer">
                                        <small class="text-muted">Built with: Ruby, Ruby on Rails, AWS, MySQL, Google Bucket, Bootstrap</small>
                                    </div>
                                    </div>
                                </div>

                                <br>
                                <!-- Interpreter -->
                                <div class="row">
                            
                                    <div class="card">
                                        <div class="card-body">
                                            <h5 class="card-title">Bytecode Interpreter</h5>
                                            <p class="card-text">For a class project I implemented a bytecode interpreter for the mock language "X" which was provided by the professor. This project was an excercise in text parsing as well as using various data stuctures such as Stacks, HashMaps, and ArrayLists</p>
                                            <a href="https://github.com/zzhenney/interpreter" target="_blank" class="btn btn-primary">Codebase</a>
                                            <button type="button" class="btn btn-info" data-toggle="modal" data-target="#bytecode-doc-Modal">Documentation</button>
                                        </div>
                                        
                                    
                                        <div class="card-footer">
                                            <small class="text-muted">Built with: Java, Netbeans, JUnit</small>
                                        </div>
                                    </div>
                                    <div class="modal fade" id="bytecode-doc-Modal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                                            <div class="modal-dialog modal-lg" role="document">
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                <h5 class="modal-title" id="exampleModalLabel">Bytecode Interpreter</h5>
                                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                    <span aria-hidden="true">&times;</span>
                                                </button>
                                                </div>
                                                <div class="modal-body">
                                                    <h5>Inspiration</h5>
                                                    <p>
                                                        This a project I completed for my software engineering course while in school. 
                                                        This project served as an educational experience into how build interpreters as well as software engineering principles (i.e. S.O.L.I.D.) 
                                                    </p>
                                                    <h5>What it Does</h5>
                                                    <p>
                                                    This bytecode interpreter accepts a list of bytecode instructions as the input. 
                                                    The interpreter then parses and runs the instructions and outputs the result of the input bytecode program.
    
                                                    </p>
                                                    
                                                    <h5>Implementation</h5>
                                                    <p>
                                                        The main components of the program can be divided into 6 parts. 
                                                        These parts include the Interpreter, ByteCodeLoader, Program, VirtualMachine, and RunTimeStack classes as well as the resolveAddrs method within the Program class. 
                                                        The general flow of the program is given below by a simplified UML diagram (fig. 1)
                                                    </p>
                                                    <figure>
                                                        <img src="images/ProgramFlow.png">
                                                        <figcaption>fig. 1</figcaption>
                                                    </figure>
                                                    <p>
                                                        The ByteCodeLoader, resolveAddress method (found in the Program class), RunTimeStack, VirtualMachine were implemented first. 
                                                        The purpose of the ByteCodeLoader is to translate the commands read in from the .x.cod files and initiate the proper ByteCode subclass. 
                                                        This was accomplisted via a StringTokenizer to separate the individual commands, a call to the CodeTable HashMap, and Object.Class’s .newInstance() method. 
                                                        Once a new instance of the bytecode is created, it is passed to the resolveAddrs() method.
                                                    </p>
                                                    <p>
                                                        The resolveAddrs() method’s implementation is dependent on the AddressResolver interface. 
                                                        Any ByteCode subclass that requires an address resolution implements the AddressResolver interface. 
                                                        By using the interface, the resolveAddrs() method is easily able to check if the passed bytecode requires address resolution. 
                                                        If it does then address is resolved via the interface’s setTargetAddr() and getLabel() methods. 
                                                        By using the interface and a HashMap for the labels I was able to reduce the function from  θ(n^2 ) to θ(n).
                                                    </p>
                                                    <p>
                                                        The implementation of the VirtualMachine and RunTimeStack classes are pretty straight forward. 
                                                        Any stack manipulations done by the VirtualMachine are done by using RunTimeStack’s methods upon the RunTimeStack object runStack within the VirtualMachine object.
                                                    </p>
                                                    <figure>
                                                        <img src="images/pop.png">
                                                        <figcaption>fig. 2</figcaption>
                                                    </figure>
                                                    <p>
                                                        Similar to the VirtualMachine class, the ByteCode subclasses are able to manipulate the RunTimeStack via the VirtualMachine’s methods. 
                                                        This encapsulation prevents the ByteCode subclasses from having direct access to the RunTimeStack. 
                                                        Figure 2 above provides a basic representation of how PopCode manipulates the stack.
                                                    </p>
                                                    
                                                    <h5>Challenges & Issues</h5>
                                                    <p>
                                                        Implementing the DUMP bytecode proved to be harder than I thought. This was one of the major pain points during the project as it was very time consuming. I could have significantly cut down the development time if I had handwritten the code first. Instead I spent a considerable amount of time trying to hack it together. I kept finding myself stuck in an infinite or throwing uncommon exceptions. Once I turned away from my computer and wrote out an algorithm I was able to implement it correctly.
                                                    </p>
                                                    <h5>What I learned</h5>
                                                    <p>
                                                        I learned the value of picking the correct data structure for the job. For example, using a HashMap to store bytecode labels greatly improved the time complexity of looking up bytecode instructions.
                                                    </p>
                                                    <p>
                                                        Next time I would put more emphasis on creating helper functions. There are some areas in the code that could be cleaned up with smaller functions. 
                                                            
                                                    </p>
                                                </div>
                                                <div class="modal-footer">
                                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                                </div>
                                            </div>
                                        </div>
                                </div>
                            
                            </div>
                        </div>
                    </div>
                </div>
          	</section>
            <section data-scroll-index="2">
            
                <div id="resume">
                	<br>
                	<h1 class='sectitle'>Resume</h1>
                	<div class='center-content'> 
	                    <embed src="images/Zac_Henney_Resume.pdf" width="100%" height="960" type="application/pdf">
	                </div>
                </div>   
            </section>
            
            <section data-scroll-index="3">
                <div id="contact">
                    <div class="center-content">
                            <br>
                            <br>
                        <h1 class="sectitle">Contact</h1>
                        <div>
                            <ul class='links'>
                                <li class='lilinks'>
                                    <a href="https://github.com/zzhenney">Github</a>
                                </li>
                                <li class='lilinks'>
                                    <a href="https://www.linkedin.com/in/zachenney">LinkedIn</a>
                                </li>
                                <li class='lilinks'>
                                    <a href="mailto:me@zachenney.com">Email</a>                            
                                </li>
                            </ul>
                            <br><br><br>
                                
                        </div>
                    </div>
                    <div class="space"></div>
                </div>
                
            </section>
            

            <div class="center-content center">
                <a data-scroll-goto="0"><br />To the top ☝ <br /></a>  
            </div>
        
            <div class="footer"></div>
            
        </div>
        
        
    </body>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
    <script src = "https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.3/jquery-ui.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
    <script src="javascripts/jquery-1.10.2.min.js" type="text/javascript"></script>
    <script src="javascripts/scrollIt.js" type="text/javascript"></script>
    <script>
            $(function() { $.scrollIt({
                  upKey: 38,             
                  downKey: 40,           
                  easing: 'linear',     
                  scrollTime: 900,       
                  activeClass: 'active', 
                  onPageChange: null,    
                  topOffset: 0           
                }); });
    </script>
    <script>
        $("#movierank-demo-Modal").on('hidden.bs.modal', function (e) {
            $("#movierank-demo-iframe").attr("src", $("#movierank-demo-iframe").attr("src"));
        });
    </script>
			
 
    
</html>
